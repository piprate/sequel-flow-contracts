// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../../contracts/Badge.cdc (0)
// ../../../../contracts/DigitalArt.cdc (10.516kB)
// ../../../../contracts/ExampleNFT.cdc (3.924kB)
// ../../../../contracts/Gallery.cdc (0)
// ../../../../contracts/Membership.cdc (0)
// ../../../../contracts/Post.cdc (0)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _badgeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func badgeCdcBytes() ([]byte, error) {
	return bindataRead(
		_badgeCdc,
		"Badge.cdc",
	)
}

func badgeCdc() (*asset, error) {
	bytes, err := badgeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Badge.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _digitalartCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\xdf\x4f\x23\x39\xf2\x7f\x86\xbf\xa2\xe0\x61\x27\xd1\x97\x4d\x76\xa5\xaf\xee\x21\x9a\x5e\x16\xc1\x70\x17\xdd\x81\xd0\xc0\xed\x3d\xac\x56\x5a\xa7\xbb\x92\xf8\xe8\xd8\x91\xed\x90\xc9\xb2\xfc\xef\xa7\xb2\xdd\x6e\xbb\xdb\xcd\x30\xdc\xe5\x01\xba\xed\xaa\xb2\x5d\x3f\x3e\xae\xb2\x9b\x6f\xb6\x52\x19\xb8\x95\xe2\x7a\x27\x56\x7c\x51\xe3\x83\x7c\x44\x01\x4b\x25\x37\x70\x3a\x99\x6a\xc3\x44\xc5\x54\x35\xed\x52\x4c\xca\xaa\x3c\x3d\x3e\xde\xee\x16\x50\x4a\x61\x14\x2b\x0d\x5c\xf1\x15\x37\xac\xbe\x50\x66\xd6\x97\xf8\x7c\x7c\x0c\x00\x30\x9d\xc2\xa7\x27\x14\x46\xfb\x37\xfb\x8f\xa4\x20\xb5\xc2\xa5\x97\x35\x17\xdc\x70\x56\xf3\x3f\xb0\x1a\x8d\x3b\x34\xff\xe2\x66\x5d\x29\xb6\x1f\xf1\x6a\x06\xff\x9c\x0b\xf3\x97\xff\x3f\xb3\x13\x9e\xc1\x45\x55\x29\xd4\xfa\xbc\xcb\x72\x85\x5b\xa9\xb9\x49\x38\x8c\x1c\xa6\xbf\xe1\xc2\x60\x15\x91\x8f\xc3\xec\x6f\xd9\x06\x2b\xb8\x63\x66\xdd\x5b\x42\x8d\xb4\x80\xba\xc6\xd2\x70\x29\xee\x8d\x54\x6c\x85\x44\x39\x83\xe8\x65\x80\xfc\x6e\xb7\xa8\x79\xe9\xa8\xdb\xe7\x84\xf8\xa2\xda\xf0\xb7\x89\xb5\x94\x77\x8a\x3f\x31\xe3\x29\xa3\x97\xb0\x14\x23\x0d\xab\xef\x77\xdb\x6d\x7d\x68\x9a\x1e\xd6\xe8\x9a\x41\xec\x36\x0b\x54\x20\x97\x91\x59\xe1\xf6\xfa\x41\x83\x59\x33\x03\x6b\xf6\x84\xb0\x40\x14\xb0\xb1\xba\xea\xea\xe2\x89\xa9\x58\x7e\xa3\xc7\x30\xf6\x2f\x4c\x71\xb6\xa8\x11\x34\xff\x03\xa1\xe2\x56\x07\x4c\x1d\x68\xc0\x7b\x54\x1c\x35\x28\xd4\x72\xa7\x4a\x74\x7a\x66\x65\x89\x5a\x8f\x34\xd6\xcb\xb1\x95\xbe\x61\xda\xa0\xd2\x33\x78\xbe\x37\x8a\x8b\xd5\x0c\x6e\x6c\xcb\xcb\x71\x98\x84\x36\x6a\x57\x1a\xdf\x0e\xcf\xb6\x3d\x56\xd3\x06\x0d\xab\x98\x61\x33\xb8\xf1\x4f\x09\x09\x8d\x22\xf0\x8b\xf9\x54\x71\x9a\xdd\xbc\x4a\x57\x41\x3f\x2e\xb8\x19\xf5\xc5\x8c\x21\x1a\x8d\x7e\x34\xed\x49\x43\x07\x45\x18\xb9\x4f\x94\x0c\x08\x05\xfc\x18\x48\x5e\x8e\x93\xd9\x2d\x77\x02\x04\xee\x1b\xda\xab\xd1\x18\x9a\xf9\x75\x06\xa7\xa5\x3e\xb1\x1a\x8a\xcc\x08\x5f\x9f\x40\xa6\xf1\xff\xfc\x38\xa3\x1f\xc7\x09\xbf\x42\xb3\x53\x82\xc6\x8a\x26\x1d\x4d\x3d\xb6\x49\xa3\x8b\x76\xaa\xd3\x29\xfc\x83\x8b\x47\x30\x12\xe6\x77\xd7\xf7\xb0\xe4\x35\x0e\x9a\x8c\x28\xc9\xff\xc9\xf2\xb1\x04\x0a\xcf\x1e\x93\x60\x1b\xcc\x11\x5f\x28\xc3\xb5\xeb\xee\xf1\x30\xdb\x37\xcc\xf5\x41\x03\x73\xe8\x31\xc0\xea\xb1\x25\x80\x4c\x2c\xe2\x0a\x75\xa9\xf8\x96\xd4\xd9\xe3\xae\xda\xbe\xdc\xe8\x37\x58\x71\x06\xe6\xb0\xc5\x19\x5c\xec\x2a\x2e\xcf\xe0\x17\x5e\xa1\xec\xc9\x71\x24\x1d\x01\x4d\x27\x61\x36\x0a\x93\xd5\x62\x87\xe6\x4e\xe1\x13\xc7\xfd\x90\xc2\x6f\xe6\x37\x9f\xec\x58\x30\xc2\xc9\x6a\x02\x1f\xf8\x86\xad\x70\xfa\xef\x2d\xae\x3e\x8c\xfb\xe6\xe3\x1b\x4c\x26\x76\x74\xd4\x74\xa1\x73\xaf\x10\x63\x6d\xcf\x86\x7d\xf9\xd4\xe9\x8c\x7a\x99\xd6\x68\x32\xf2\x14\x96\x52\x55\x99\x0e\xcb\xf0\x37\x64\x6d\x5f\x1a\xce\x89\x4b\xe7\xfc\xed\x2c\xa1\x88\x9d\x2b\xed\x49\x5d\x28\xd7\xd7\xf5\x91\x94\x26\xe3\x09\x29\x41\xac\xc9\xb4\x27\x63\xdf\x2c\x41\xc6\xb8\x29\x5d\xd7\x60\x69\x6f\xc7\x66\x1d\xd6\x9e\xd9\x3a\x2a\x88\x0d\x77\xd6\x01\x92\xd8\x76\x19\xb6\xc4\x7c\xd4\xfa\x3a\xe2\x5a\x5c\x29\x12\x63\x66\x80\x8f\x6d\x10\x8a\x14\x0d\x42\xa7\xb3\x17\x14\xde\x70\x43\x04\xde\x8e\x81\xae\x1b\xfb\x81\x3c\xb2\x2d\x14\xb1\xa5\xfb\xa4\x36\xb8\x0a\x6b\xec\x7e\x67\x64\x68\x28\x62\xb3\x0f\x92\x46\x26\x6f\x39\xa2\xc6\x8c\x16\xbd\x0f\x90\x06\xfd\x63\x9f\xc8\xbb\x02\x14\x8d\x53\x64\xe4\x04\x87\x20\x49\xe1\x25\xa3\x4b\x32\x31\xe9\x90\xfe\xf7\xbb\x9d\x77\x40\xe1\xdd\x64\x80\x9f\x5c\xa4\x91\x41\xcf\xf9\x2d\x89\xb6\x8c\xeb\x87\xe6\x31\x4a\x75\x98\x06\x26\xa2\xbe\xb0\x81\x35\x69\x09\xf5\xf5\xf3\xdc\xc9\xfc\xf6\xfa\x21\xdd\xd4\x5c\x4e\xf5\x88\xe2\x83\x86\xf9\x55\x0f\x12\x79\x26\xad\x78\x25\x41\x89\x25\xf3\x90\x25\xab\xa8\x39\x45\x33\xfa\x33\xbf\x6a\xd3\xde\x5c\xb2\x92\x89\x1c\x4e\xba\x73\xbc\xdf\x96\xc8\x74\xb5\xfb\xb0\xe6\x1a\x38\x65\x8d\x08\x94\x29\xaa\x25\x2b\xd1\xe5\x90\x3b\x8d\x4a\x43\xc9\x04\x94\x4c\x1b\xa2\xe0\x2a\x36\x41\x9b\x1c\x03\xd3\x6d\xd2\x0a\xac\xae\xe5\x1e\xa4\x59\x13\xbb\x91\x50\xb9\xec\x3e\x66\xe5\xc2\x48\x2f\xb0\x95\x32\x81\xb9\x01\x56\x6b\x2f\x41\xc3\x52\x2a\x50\xc8\xaa\x06\x44\x48\xfc\x1a\xa1\x42\xc3\x78\xad\x3b\xb9\x2f\x17\xb6\x33\x12\xd7\x77\x89\x76\x81\xdd\xc4\xbe\x93\x7d\x52\xf2\xe6\xa7\x3d\xb2\xbe\x31\x83\x9f\x7b\xae\x74\x7b\xfd\x30\xee\x71\xad\xd0\xcc\xaf\xf4\x68\x3c\x83\x5f\x9d\x49\x7f\xeb\x91\x2c\xa4\x52\x72\x7f\x7b\xfd\x10\x17\x30\x33\xf8\x2e\x37\xc0\x00\x73\xbb\xee\x8e\x8c\xb6\x83\xb8\xcf\x3b\xae\x33\x9d\xc2\x7c\x69\xd5\xa4\x50\xef\x6a\x03\x5c\x8b\x0f\x06\x04\xaf\xcf\x9c\x03\x54\xa4\x54\xd7\x4f\xa9\x22\x56\xa0\x70\x89\x0a\x45\x89\x5d\x41\x7a\x2d\x77\x75\x05\x0b\xb4\xf4\x9a\xc0\x99\x39\x37\x62\x6a\xb5\xdb\x50\x99\xe6\x6c\x4c\xd3\x2e\x7b\x40\xb2\x95\xda\x74\x66\x47\xbf\x91\x9f\x58\x51\xd0\xac\xc6\xf0\xe7\x9f\x4d\xd3\xb9\xf5\xf9\x02\x78\x35\x9e\xf5\xd8\xe8\x77\x7a\xc9\x84\x90\xc6\x6b\x28\x76\x8d\xb0\x86\x99\x0d\xf6\xf9\xd5\xf0\x2a\x29\x14\xb8\x28\xa5\x52\x58\x9a\xd3\x64\x9c\x97\xc1\x18\x6a\x9d\xa9\x69\xb9\x80\xb2\x0d\x8e\x4c\x8d\x26\xf7\x34\xea\xe2\x40\x18\xc6\xca\x52\xee\x84\x19\xc4\xb1\x56\xfa\xac\xe7\xb6\x67\x7d\x80\xbb\x53\xf2\x89\x57\xa8\x32\x5d\x9f\xb1\x44\xfe\x94\xed\x7a\x25\x1e\xa6\xd3\x4e\xfd\x47\x08\x5a\x4a\xb1\x94\x6a\xc3\xc5\xca\x61\x67\x92\x3e\x13\x01\xd7\xc0\xda\x35\xd8\xed\x69\xcf\xcd\x9a\x16\xfc\xbb\x73\xd7\xdf\xc9\x10\x4b\x8e\x75\x95\x03\xc7\xa6\xc0\xb3\x9a\x22\x9d\xcd\xe0\xe7\x67\xc7\x98\x41\xf5\xdb\xeb\x87\x97\x04\x7a\xf7\xfe\x10\x22\x6e\xfb\x8c\x1b\xf9\x84\xcd\xbe\xe1\xce\x50\xc8\x0b\x22\x53\x31\x51\x81\x23\xe2\xc1\x7d\x4b\x56\xd7\x79\x00\x6f\x62\xb2\x19\x6c\xd4\x3c\xb4\x80\x3e\x1e\x00\x8e\x4c\x09\x68\xf5\x08\x1f\xbf\x77\x18\x1e\xd6\x3d\x51\x76\xda\xa3\x47\x3c\xcc\xa0\x1d\x60\x0c\xe7\xe7\xb0\x65\x82\x97\xa3\xd3\x0d\xd7\x9a\x2c\x71\x7b\xfd\x70\x3a\x3e\x4e\x33\xc0\x0d\xef\x9c\xc8\xd8\x61\x26\xbc\x6a\xce\x64\xc2\x68\xea\x7c\xe2\x2b\xa6\x8e\x0c\x5f\x36\x7e\xfc\xde\xb2\xe6\xea\x5d\x72\x11\x87\x96\xc9\xc6\xca\x1e\x49\xdb\x56\xd9\xa4\x58\x56\x55\x89\x5e\x83\xda\x75\xe4\x60\xb1\x80\xc0\x64\x5c\xd4\x7a\x46\x5e\x01\x53\x8a\x1d\x5e\x33\xc9\x9b\xc0\xfb\x35\x23\xb8\x07\xa6\x4f\xe0\xe7\x14\x53\x8f\x7b\x3c\x2d\x02\x53\x1a\xe8\xd5\x7b\xdc\xc5\x4b\x56\x55\x76\xf6\x02\xf7\x5e\xb8\x5f\x4e\x14\x5c\xfb\x35\x2f\xd7\xa0\xbc\x9f\x52\xa7\xac\x2b\x90\x02\x7b\x63\xca\xba\x7a\xc8\xfb\xcb\xaf\xbc\xfa\x2d\x2c\x20\xe3\x0c\xf1\x59\x1b\x79\x81\x91\x6f\xf1\x81\x0a\xb5\x51\xf2\x10\xc6\x1d\xf0\x02\xb7\xfb\xa5\x41\x47\xce\x63\x83\xce\x1a\xad\x81\xde\xf9\x95\x3f\xa9\x62\x0a\x9b\xbd\xbb\x4c\x71\x74\xc0\xb4\xfd\x1d\xb6\x63\x47\xef\xaf\x9d\x30\x7a\xc4\x83\x1e\x98\x75\xd8\x90\xe3\xc6\xbf\xa2\x71\x10\xd6\xec\x0c\x94\xd9\x38\xe4\x78\x6d\xba\xa0\xa5\x5b\x57\x0b\x1d\x36\x85\xa2\x3c\x06\xb8\xd1\x21\x23\xb3\xde\x4d\x04\x4d\xeb\x5a\x56\xfa\xb5\x75\x7f\x4b\xda\x90\xd7\xc8\x77\x19\x4f\x61\xfa\x2b\x89\x47\x4e\x55\x6d\x44\xbc\x57\x63\x36\x7f\x8f\xb6\xc5\xb3\x58\x10\x7e\x21\x17\x15\x2b\xca\x03\xc9\x5f\x48\x41\x76\xa3\xd0\x30\xe2\xa2\xac\x77\x95\xdd\x77\xd6\x6e\x5f\x99\x5f\x8d\x27\x69\x3e\xef\x32\x5a\xcd\x96\x4d\x4a\xa2\xd0\xba\x99\x90\x21\x17\xf1\xce\x47\x96\x59\x78\x3b\x51\xa0\x59\xa1\x51\xbc\x7f\xdd\x1e\xef\xcc\xc4\xf8\x32\x17\xb6\x27\x36\xeb\xc9\xa4\x45\xee\xc0\x64\x09\xc5\x90\x0d\xd9\xce\xac\xbf\x62\xc8\x8e\x33\x90\x38\x82\xb7\xce\x44\xd3\x94\x07\xb0\xd6\x98\x99\x8f\x97\x21\x78\x3d\x98\x22\xa5\x9b\x83\x3b\x56\x94\xed\x36\xea\x01\x65\xd4\x05\xe1\x06\x68\xd2\x65\x0e\xc8\x7d\x43\x81\x05\xbd\x11\x52\xc9\x04\x95\xcf\xc3\xa9\x5d\xa9\x90\x19\xfc\xb4\xd9\x9a\x43\x3f\xcb\xdb\xba\x54\xa9\xf1\x29\x8f\x67\xe2\x20\x05\xfa\xb2\xa9\xae\x29\x08\x9c\x10\x60\x16\xfb\x91\x64\x75\xb1\x23\xca\xfb\xc8\xb5\xb2\xa3\x8e\xb2\xb9\x44\x54\x84\xb5\xcb\x0c\x3b\x76\x33\x74\x2c\x25\x5e\x61\x84\xa9\x4d\xb9\x39\xf2\x1b\xc0\xac\x39\xf3\x72\x3b\xc9\xbc\x9a\x79\xdf\x86\xb6\x34\x8d\xbd\xda\x1e\xdd\x95\xa5\x81\x82\xa4\x5d\xb8\xa4\x76\x14\x76\x93\x98\xac\x5d\xfc\x67\xeb\xd3\xc4\x36\x59\xa1\xb9\x64\x5b\xb6\xe0\x35\x37\x07\x7b\x8f\xd0\x4b\x4a\xef\x98\x59\x8f\x4f\x26\x2e\xf0\x3e\x7e\xf7\x1c\x79\x6e\x97\xf4\xe5\xa7\x51\x3b\xe6\xd1\xd1\xd1\x51\x9b\x2d\x5d\xda\xba\x25\xaa\x14\xca\x30\xac\xcb\x09\xbd\x59\xdb\x59\xc6\x49\x95\x57\x6d\xb2\x84\x49\x16\x0a\xbc\xda\xc6\x27\x93\xa4\x08\x6f\x7d\xcb\xde\x02\x35\x2f\x9f\x43\xaa\xec\x9c\x08\x18\xf5\x82\x54\xa0\x25\x6d\x0e\x84\x78\x9a\x6f\x78\xcd\x14\xec\xed\x0a\xe4\xde\xa6\x10\x0b\x6c\x44\xd8\xfb\x1a\x23\xed\x8d\x8f\x75\xb5\x10\x39\xb9\xb2\xc2\x8e\xde\x5c\xfb\x79\x09\xc4\x49\x70\x4d\xff\xb5\xf7\x57\x7a\x77\x99\xbb\x7d\x8d\xce\x1b\x7c\x86\xd6\x94\xf7\x3c\xd4\xe0\x0a\x4b\xbe\xe5\x48\x32\x22\xc4\xdf\x69\x8f\xda\x5c\xc5\xcd\xfd\x02\xb3\x71\x4a\x8d\xac\x76\x77\x43\xd9\x2b\x9c\x34\xaa\xb7\x2a\x83\x53\x0d\x9b\x3f\xb1\x3a\x29\xe0\xf4\x14\x66\x70\x6a\x23\xcb\x1d\x3d\xc1\xfc\xea\x74\x90\x2d\x3a\x11\xfb\xa9\x68\x2f\x55\x48\xc4\x4d\xdb\xd5\x56\xc2\x56\x11\xfc\x09\x7b\x12\x4f\x22\x57\xf5\x17\x63\xf6\xbc\x8f\x71\xa1\xff\x8e\x87\x51\x3a\x51\x3b\x80\x23\x03\x56\x53\xe6\x70\xb0\xca\xc0\x6a\xa8\x22\xa5\x5f\x7f\x88\x5f\x53\xb1\xbf\x41\xe1\xef\xda\x46\x3d\x40\xef\x2b\xb8\x4f\x03\xbd\xf3\xf6\x56\x51\x51\xf3\x59\x96\xd1\x1d\xc3\x07\x06\x7a\xcd\x13\x36\xa7\xf2\xed\xdc\x6d\xc3\x6b\xc4\xe1\x98\xbe\xc3\x93\x3d\xb5\x6f\x7e\xc9\xe9\x7d\x60\x8c\x5a\xf3\x6c\xee\xb0\x3d\xd0\xd3\x6b\x9e\x30\x39\xe2\x0f\xf4\x51\xeb\xab\x6c\xc9\xc1\x7f\x97\x3b\xea\xcc\x0b\x69\x6f\x05\x5a\x0b\xf9\xa6\x3c\x43\xb8\x28\xf8\x61\x40\x60\x74\x57\x90\x89\x8e\x01\xe3\xb8\x0b\x84\xd4\x09\xf3\xa4\xcd\x85\x42\xa0\x75\x0d\xaf\xc8\x75\x37\x0c\xa9\xec\xe4\x18\xb9\xf9\xa5\x57\xa0\xe3\x5c\x26\xd1\x00\x8e\x87\xbf\x91\x0b\x9f\x79\xb8\xc1\xa0\x78\xec\x54\x81\x6f\x41\x9f\xaf\xc5\xbc\x1f\x25\x8e\x76\xda\x95\x96\x72\x27\x7a\x81\xde\x2b\x00\x3d\x43\x91\xe4\x6f\x21\xee\xbd\x68\x97\xde\xbb\x98\xcf\x88\x88\x8e\x89\x2d\xc9\x24\x7b\xed\x1d\x5d\xfe\xb5\x94\xe9\xcd\x76\xaf\xd8\x4d\x32\x9e\x6e\x56\xe9\xee\xed\xa9\x92\x89\x32\x14\xd2\x7b\xcf\x76\xcd\xe1\x78\xb4\xc4\xe8\xa3\x85\xbe\x77\xbc\x0d\xc5\xde\x89\x61\x6f\x44\xb0\x6f\xc0\xaf\x77\xa3\xd7\xbb\xb0\xeb\x8d\xc8\xf5\x2e\xdc\xfa\x1f\xa0\xd6\x37\x62\x56\x40\x2c\x1c\x86\xa0\x77\xa0\xd6\x9b\x31\xeb\x1b\x10\xeb\xbf\xc3\xab\xfe\x09\x4e\xf4\xf5\x53\x3e\x30\x3a\x4c\x79\x22\x28\x86\x3a\xe2\xcf\x47\xf2\x07\x81\x3e\x7c\x07\xab\xa6\x6e\x5d\xe6\xf3\x4f\x7b\xe1\x35\x4e\x8f\x96\xef\xd1\x80\xdc\x29\x1b\x5d\x15\x6c\xc3\x77\x5b\xd0\x54\x6a\xd9\x2f\xb6\xa0\x80\xa9\x76\xaf\xd3\x2a\xac\xe2\xb2\x7f\x20\x33\x58\x47\x90\x04\x97\xe8\xbf\x41\x40\xf7\xcb\xae\xfc\xf0\x6d\x3e\x9f\x32\x46\xdf\x76\xd9\x51\xdd\x6b\x8f\x31\xd6\x4a\xfb\x7d\x9d\x3b\xe6\xb0\x9f\x7c\xe9\xf6\x53\xb0\x30\x40\x6a\xd0\x1f\x8e\xd3\x5e\xbf\x1f\x40\x41\x25\x6e\x2c\xff\xb2\xc1\x67\x57\x05\x84\xa2\x80\xf2\x79\xcd\x9e\xd0\x1f\xd3\xfa\x35\xa6\x35\x9e\xe5\x68\x81\xdb\x4a\x88\x8a\x2d\x77\xc3\xeb\xca\xbf\x09\xc9\x1a\x7d\xfc\xde\xf2\x44\x47\x8d\x5d\x7d\x46\x7e\x66\x3d\x7c\xf8\x33\xc3\x97\xe3\x97\xff\x04\x00\x00\xff\xff\xea\x96\x13\x54\x14\x29\x00\x00"

func digitalartCdcBytes() ([]byte, error) {
	return bindataRead(
		_digitalartCdc,
		"DigitalArt.cdc",
	)
}

func digitalartCdc() (*asset, error) {
	bytes, err := digitalartCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DigitalArt.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x8c, 0x95, 0x47, 0x97, 0x31, 0xef, 0xa6, 0xd5, 0x89, 0x1a, 0x74, 0xa, 0xac, 0x11, 0xd0, 0xd5, 0xfb, 0xdf, 0xea, 0x43, 0x21, 0x5d, 0x67, 0x64, 0xfb, 0x2b, 0xc, 0x32, 0xf, 0x7b, 0xd0}}
	return a, nil
}

var _examplenftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5f\x6f\x1a\x47\x10\x7f\xe7\x53\x4c\xfd\x90\x1e\x6a\xcc\xb5\x52\xd5\x07\x64\xd7\xa9\xec\x20\xf1\x50\x14\x25\x54\x7d\x88\x22\x65\xb9\x1d\x60\xe5\xbb\x5d\xb4\x3b\x07\xa5\x16\xdf\xbd\x9a\xdd\xbd\xff\x47\x9c\x22\xcb\xc0\xed\xcc\xec\x6f\x7e\xf3\x97\x34\x85\xf5\x5e\x39\x50\x0e\x84\x06\xfc\x47\x14\x87\x1c\x41\xf1\xff\x02\x35\x09\x52\x46\x83\xd9\x82\x80\x45\x6e\x4e\xb0\x32\xfa\x76\x51\xea\x9d\xda\xe4\x08\x6b\xf3\x8c\x7a\x92\xa6\xb0\x24\xd6\xd7\x86\xe0\x20\x2c\xb1\x38\xed\x11\xcc\x76\xab\x32\x25\x72\x70\x24\xb4\x14\x56\xc2\xa6\x24\x50\x04\xc2\xb9\xb2\x40\x09\x64\x60\x83\xac\x7f\x44\x7b\x06\xa7\x0a\x95\x0b\xcb\x4f\xf7\xe6\x04\x85\xd0\x67\x58\x2d\xd6\x0e\x4e\xa6\xcc\x65\x03\xc9\xdb\xce\x8c\x45\xd8\x96\x3a\x63\x7c\x22\x57\x74\x9e\x4d\x26\xaa\x38\x18\x4b\x8c\xb1\x82\xe8\x11\xc2\xd6\x9a\x02\x6e\x66\x69\xff\x60\x96\xc9\xec\x66\x32\x39\x94\x1b\xc8\x8c\x26\x2b\x32\x82\xf7\x81\x81\xd5\x62\x3d\x1f\x1a\x7a\x99\x4c\x00\x00\x58\xe1\xe8\x91\x92\xc8\x3f\x95\x87\x43\x7e\x9e\xc3\x5f\x4b\x4d\xbf\xfd\xda\x08\xe0\x91\xb1\x3e\x46\xbb\x4b\xad\x48\x89\x5c\xfd\x8b\x32\x99\xf6\x64\xfe\x56\xb4\x97\x56\x9c\x12\x25\x2b\x33\x6f\x3d\xe6\x39\xfc\x21\xa5\x45\xe7\x1e\xfa\x2a\x4f\x78\x30\x4e\x51\x47\x83\x4c\x5b\xbe\x56\xb0\xe8\x4c\x69\x33\x84\x51\x97\x66\xcb\xd5\x62\x0d\x2f\x5e\xba\xd2\xc8\x91\xa0\x31\x3c\xe9\x9c\xb1\xdb\x05\x92\x90\x82\xc4\x1c\x5e\x3e\x91\x55\x7a\x37\x87\xf0\x7e\x69\x64\x95\x66\x74\x5a\xd1\xf2\xa9\x32\x34\x6d\x5d\xc3\x2f\x87\xf9\x76\xa6\x24\xdc\x43\x90\x1b\x1e\x56\x17\xc1\x3d\xbc\x5c\xea\xe3\xf0\xe9\x32\xe2\xe1\xa3\xc9\x73\xf4\x19\x31\xe2\xe8\x07\x6b\x8e\x4a\xa2\x7d\x3b\x3c\xfa\x88\x19\xaa\xe3\xe8\x51\x63\xf2\x43\xb9\xc9\x55\xd6\xf2\x21\x4d\x41\xaa\x90\x7f\xf6\xcc\x39\xcf\x4c\x66\x46\x6f\x8d\x2d\x94\xde\x01\xb1\x01\xd7\x16\x67\x01\xae\xb3\x06\x31\x9d\x0f\x08\x27\x45\x7b\x2e\xbe\xaf\x81\xa7\xaf\xb0\x7c\x82\xad\xc2\x5c\x0e\x98\x37\x27\x8d\x92\x6b\x62\x0e\xef\x5e\x82\xf4\x88\xa7\xab\xc5\xba\x17\x09\x48\x46\xc9\xaf\xcd\xc1\xdd\x6d\x97\xe1\x36\xea\x53\x4c\x4f\xb0\x58\x98\x23\xfa\x3e\xc1\x9e\xf8\xaa\x0a\xb5\x58\x71\x04\x42\x4b\x08\x42\x8a\xb8\x90\xfd\xb1\xc8\x73\xb4\x1d\x5f\xb6\xa5\xae\xcd\x26\xd5\x87\x56\xa6\xcc\xe1\xdd\x98\x57\x3d\x1f\x38\x4f\x3d\xc9\x0c\xbf\xeb\xd0\x2c\x60\x4d\x9e\xf1\x3c\x87\xe6\x82\x29\x3c\x3c\xc0\x41\x68\x95\x25\x37\x85\x72\x8e\xc3\xb4\x5a\xac\x6f\xa6\x93\x8e\x61\x2c\x54\xaf\x2a\xfd\x35\x33\x25\xab\xba\xac\x6f\xb3\x0f\x33\x11\x6a\xae\x67\xc3\x22\x95\x96\x91\x79\xd5\x2b\xd4\xca\x50\xc6\x40\xe2\x99\x79\xf5\xb4\x32\x85\x42\xca\x0e\x83\x35\xc1\xae\x95\x72\x6d\x43\xb5\x12\x8b\x2f\x9f\x2a\x45\x25\x41\x58\x2b\xce\x03\xf2\xe3\xc5\x89\x07\x77\x85\xed\x7e\xca\x74\xe8\x0e\x1f\x84\xfb\x01\xde\x35\x1d\x93\xb5\x26\x03\x9d\xa6\x95\xc0\x7d\x4d\x64\x57\x8c\x3d\x90\xd2\x43\xd6\x78\x8a\xc6\xa3\x0f\xad\x1a\x3b\xed\x55\xb6\xaf\xd3\xd0\x8f\x98\x5c\x82\xd1\x38\xb8\xd3\xe4\x72\x3d\x9e\x19\x9f\x95\xfc\x52\x3b\x30\x12\xf6\x76\x67\xe5\x78\x73\x57\x7d\x3d\xda\x12\x1d\x59\x73\xae\xef\xbd\x12\xef\x1d\xd2\xf2\xc9\xc5\xdc\xf0\x85\xe4\xc3\x53\x0d\x4c\x3e\xa3\xbd\x20\x10\x16\x41\xe9\x5e\xec\x07\x41\x0c\xd6\x92\xe9\x1c\x3e\x07\x7e\xbf\xf4\x22\x16\x73\xb0\x57\x1a\xcf\x78\x76\x57\xf0\x6d\x8c\xb5\xe6\xc4\x59\xb8\x43\x0a\x8d\x6a\x8b\x16\x35\x77\x2a\x53\xd5\xfd\x75\x60\x69\x0a\xce\x04\x0f\x9a\xc2\x87\x4c\x68\xb0\x28\x24\x28\x72\xf5\xec\xf0\x19\xcb\x02\xd5\xd3\xbd\x91\x6e\xe0\x61\x8d\xa7\x35\xe8\xa6\x73\x78\xf3\x1d\xcd\x21\xfa\xfe\x66\x24\xfa\xc2\x8d\x5b\x18\x23\x25\x06\x76\xd0\x3f\xab\x80\x77\xcd\x8f\xcf\xa8\x34\x65\x87\x78\x78\x54\x0b\x4b\x8c\xb2\x3e\x1b\x8d\x9e\x1f\xcf\x04\x19\xc8\x2c\x0a\x42\x10\xbe\x0c\xb0\x38\xd0\xb9\xcf\x73\x45\x4d\x90\x7c\xcf\x22\xcd\x8c\x4a\x46\x3b\x67\x73\xde\x72\xa2\xee\x4f\xd5\x9d\x6d\x2b\x3d\xf4\x1f\xeb\x71\x15\x60\x83\x90\x85\xd2\x60\x2c\x38\xc3\xa1\xe3\x36\x5a\x6d\x6f\x61\x59\x33\x27\x1d\xb7\xbb\xaa\xbc\x79\x5f\x24\x03\x85\xd2\xe4\x9d\xab\xe9\x4a\xd3\xd1\x55\xe5\x4f\xa5\x09\x6d\xb5\x71\x45\x2b\xac\xcd\xa1\xe6\x77\x17\x59\xe2\xef\x61\x82\xfa\xaf\xad\x3d\x22\xf6\xc5\xaa\xc9\xf2\x5f\x48\x5d\x8b\x99\x3a\x28\x64\x1b\xad\xd9\x55\xfa\x71\x40\x7b\x54\xb6\xfd\xb8\x2e\x81\x41\x76\x46\x34\x49\x6d\x6e\x0e\x6f\x5e\x5e\xdd\x20\x2e\xd3\xb6\x53\x11\x67\x27\xee\xed\x54\xe4\x17\x4f\x7e\x8d\xbe\x2c\x9b\x70\xf9\xa2\x88\xfb\x55\xab\x03\xb7\x56\xd2\xe9\xe0\x96\x6f\x30\xf1\xa3\x03\x91\x65\xa6\xd4\xd4\xe1\x61\xe8\x7c\xc8\x9d\xa8\x35\xeb\xcd\x91\xbb\xdb\x80\xb3\x77\xf5\x38\x3e\xb8\xbf\x76\xf0\x53\x2c\xf5\xe4\x97\xe9\x78\x45\xf9\xed\x72\xda\xdd\xc5\x9a\x0d\xdb\x7b\xe6\xed\x81\xf3\x06\x6b\x31\x5f\xad\x5d\x08\x3f\x77\x12\xec\xb1\x8a\xc3\x63\x3b\x01\x62\x56\x72\x32\x39\x71\xc4\x38\x99\x1d\x19\x2b\x76\x0d\x33\x3c\x77\x5a\x79\xf3\x8d\xca\xaa\xa1\x44\xca\x67\x6c\x35\xb9\xbb\x6d\xb4\xc3\xdc\x49\xe3\x15\xe9\x6a\xb1\x6e\x8c\x4c\x3b\x88\xeb\xcc\x89\x2d\x26\x13\x07\xb1\x51\xfc\x83\x08\xb6\xc6\x5e\xeb\xd4\x9d\xdb\x73\xa5\x9f\xef\xbe\x27\x73\x7f\x4f\xba\x19\x15\xae\xec\xa2\x7b\xdb\x11\x21\x61\x77\x48\xd7\x3c\xa9\x45\xa7\xe3\x41\x88\x3d\xe0\xff\x04\xa0\x08\x2a\x9d\x3a\x09\x66\x5e\xe1\x3e\x28\x0e\x79\x0f\xca\x2d\x80\x7e\x4b\xb8\xfe\xb3\xee\x32\xb9\x4c\xfe\x0b\x00\x00\xff\xff\xfb\xc2\x84\xeb\x54\x0f\x00\x00"

func examplenftCdcBytes() ([]byte, error) {
	return bindataRead(
		_examplenftCdc,
		"ExampleNFT.cdc",
	)
}

func examplenftCdc() (*asset, error) {
	bytes, err := examplenftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ExampleNFT.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x3, 0x7b, 0xd0, 0xa8, 0xc1, 0xd8, 0xeb, 0x39, 0x68, 0xc3, 0x78, 0x1c, 0xd3, 0xd1, 0xbf, 0xee, 0xbe, 0xe6, 0x34, 0x8e, 0xfc, 0xfe, 0x34, 0x3a, 0x5b, 0xc5, 0x76, 0x37, 0xdb, 0x7a, 0xc0}}
	return a, nil
}

var _galleryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func galleryCdcBytes() ([]byte, error) {
	return bindataRead(
		_galleryCdc,
		"Gallery.cdc",
	)
}

func galleryCdc() (*asset, error) {
	bytes, err := galleryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Gallery.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _membershipCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func membershipCdcBytes() ([]byte, error) {
	return bindataRead(
		_membershipCdc,
		"Membership.cdc",
	)
}

func membershipCdc() (*asset, error) {
	bytes, err := membershipCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Membership.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _postCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func postCdcBytes() ([]byte, error) {
	return bindataRead(
		_postCdc,
		"Post.cdc",
	)
}

func postCdc() (*asset, error) {
	bytes, err := postCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Post.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Badge.cdc":      badgeCdc,
	"DigitalArt.cdc": digitalartCdc,
	"ExampleNFT.cdc": examplenftCdc,
	"Gallery.cdc":    galleryCdc,
	"Membership.cdc": membershipCdc,
	"Post.cdc":       postCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Badge.cdc":      {badgeCdc, map[string]*bintree{}},
	"DigitalArt.cdc": {digitalartCdc, map[string]*bintree{}},
	"ExampleNFT.cdc": {examplenftCdc, map[string]*bintree{}},
	"Gallery.cdc":    {galleryCdc, map[string]*bintree{}},
	"Membership.cdc": {membershipCdc, map[string]*bintree{}},
	"Post.cdc":       {postCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
